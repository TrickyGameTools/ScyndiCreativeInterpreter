// License Information:
// SCI_Exe/IntLibs/SCI/Bank.scyndi
// Scyndi's Creative Interpreter - Bank API
// version: 23.01.20
// Copyright (C) 2023 Jeroen P. Broks
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information

MODULE

VAR GewoonNiks = Lua.SCI_InitAPI(Lua.SCI_StateName,"Bank")

CLASS TBank

	READONLY STRING Tag
		
	GET BOOL AutoDelete
		RETURN Prefixed(Tag,"***AUTO")
	END
		
	STATIC VAR Obtain(STRING _Tag)
		RETURN NEW TBank(-999,_Tag)
	END

	CONSTRUCTOR(INT size,STRING _Tag="")
		if (size==-999) && (_Tag!="")
			Tag = _Tag
			Return
		End
		if (size<=16) 
			error("A bank must be at least 16 bytes")
		end		
		Tag = Lua.Bank.Create(_Tag,size)
	END
	
	DESTRUCTOR
		IF AutoDelete
			Lua.Bank.Kill(Tag)
		END
	END
	
	VOID Poke(INT ADDR,INT VALUE,INT BITS=8)
		Lua.Bank.Poke(Tag,ADDR,VALUE,BITS)
	END
	
	VOID PokeS8(Int ADDR,INT VALUE)
		Lua.Bank.Poke(Tag,ADDR,VALUE,-8)
	END
	
	VOID PokeU8(INT ADDR,BYTE VALUE)
		Lua.Bank.Poke(Tag,ADDR,VALUE,8)
	END
	
	VOID PokeS16(Int ADDR,INT VALUE)
		Lua.Bank.Poke(Tag,ADDR,VALUE,-16)
	END
	
	VOID PokeU16(INT ADDR,INT VALUE)
		Lua.Bank.Poke(Tag,ADDR,VALUE,16)
	END
	
	VOID PokeS32(Int ADDR,INT VALUE)
		Lua.Bank.Poke(Tag,ADDR,VALUE,-32)
	END
	
	VOID PokeU32(INT ADDR,INT VALUE)
		Lua.Bank.Poke(Tag,ADDR,VALUE,32)
	END		
	
	VOID PokeS64(Int ADDR,INT VALUE)
		Lua.Bank.Poke(Tag,ADDR,VALUE,-64)
	END
	
	VOID PokeU64(INT ADDR,INT VALUE)
		Lua.Bank.Poke(Tag,ADDR,VALUE,64)
	END		
	
	INT Peek(INT ADDR,INT BITS=8)
		RETURN Lua.Bank.Peek(Tag,ADDR,BITS)
	END
	
	BYTE PeekS8(INT ADDR)
		RETURN Lua.Bank.Peek(Tag,ADDR,8)
	END
	INT PeekU8(INT ADDR)
		RETURN Lua.Bank.Peek(Tag,ADDR,-8)
	END
	
	INT PeekS16(INT ADDR)
		RETURN Lua.Bank.Peek(Tag,ADDR,16)
	END
	INT PeekU16(INT ADDR)
		RETURN Lua.Bank.Peek(Tag,ADDR,-16)
	END
	
	INT PeekS32(INT ADDR)
		RETURN Lua.Bank.Peek(Tag,ADDR,32)
	END
	INT PeekU32(INT ADDR)
		RETURN Lua.Bank.Peek(Tag,ADDR,-32)
	END
	
	INT PeekS64(INT ADDR)
		RETURN Lua.Bank.Peek(Tag,ADDR,64)
	END
	INT PeekU64(INT ADDR)
		RETURN Lua.Bank.Peek(Tag,ADDR,-64)
	END
	
	VOID CLEAN()
		Lua.Bank.Clean(Tag)
	END
	
END