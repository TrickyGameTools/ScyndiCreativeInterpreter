// License Information:
// SCI_Exe/IntLibs/SCI/GINIE.Scyndi
// Scyndi's Creative Interpreter - Link - GINIE
// version: 23.11.03
// Copyright (C) 2023 Jeroen P. Broks
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information
Module

Var GewoonNiks = Lua.SCI_InitAPI(Lua.SCI_StateName,"GINIE")

Plua Loaded

Class TGINIE
	ReadOnly String Tag
		
	Get Bool AutoDel
		return Left(Tag,3)=="***"
	End		
		
	Constructor(String _T)
		If !Loaded
			Lua.SCI_InitAPI(Lua.SCI_StateName,"GINIE")
			Loaded = true
		End
		Tag = _T
	End
	
	Destructor
		if AutoDel
			Lua.GINIE.Kill(Tag)
		End
	End
	
	String Value(string Cat,string Key,Value)
		if Value
			Lua.GINIE.SetValue(Tag,Cat,Key,Value)
			//printf("Value set! %s/%s/%s -> %s\n",Tag,Cat,Key,Lua.tostring(Value))
			// return nil
			return Lua.GINIE.GetStringValue(Tag,Cat,Key)
		else
			string ret
			ret = Lua.tostring(Lua.GINIE.GetStringValue(Tag,Cat,Key))
			//printf("Return %s/%s/%s -> %s\n",Tag,Cat,Key,ret) 
			//return Lua.GINIE.GetStringValue(Tag,Cat,Key)
			return ret
		end
	end
	
	Void NewValue(string Cat,string Key, Value)
		Lua.GINIE.SetValue(Tag,Cat,Key,Value,1)
	End
	
	String StringValue(string Cat,String Key)
		Return Lua.GINIE.GetStringValue(Tag,Cat,Key)
	End
	
	Int IntValue(string Cat,String Key)
		Return Lua.GINIE.GetIntegerValue(Tag,Cat,Key)
	End
	
	Bool BoolValue(string Cat,String Key)
		Return Lua.GINIE.GetBooleanValue(Tag,Cat,Key)
	End
	
	Get String Source
		Return Lua.GINIE.UnParse(Tag)
	End
	
	Set String Source
		Lua.GINIE.Parse(Tag,Value)
	End
	
	Void Merge(String Src)
		Lua.GINIE.Parse(Tag,Src,1)
	End
	
	Void Add(String Cat,String Key,String Value,Sort,Unique)
		int _Sort = 0
		int _Unique = 0
		// Needed because the C/C++ cannot fetch booleans from Lua for some silly reason!
		// I don't know why.
		if Sort==true
			_Sort = 1
		end
		if Unique==true
			_Unique = 1
		end
		Lua.GINIE.Add(Tag,Cat,Key,Value,_Sort,_Unique)
	End
	
	Int ListSize(string Cat,string Key)
		Return Lua.GINIE.ListSize(Tag,Cat,Key)
	End
	
	String ListEntry(String Cat,String Key,Int Idx)
		Return Lua.GINIE.ListEntry(Tag,Cat,Key,Idx)
	End
	
	Table List(string Cat,string Key)
		plua Ret = {}
		//print(cat,key,self.ListSize(Cat,Key)) // debug
		for i=0,self.ListSize(Cat,Key)-1
			Ret[i] = self.ListEntry(Cat,Key,i)
		End
		return Ret
	End
	
	Get Table Categories
		plua Ret = {}
		plua Num 
		Num = Lua.GINIE.CatsGrab(Tag)
		for i=0,Num-1
			Ret[i]=Lua.GINIE.Cats(Tag,i)
		end
		return Ret
	End
	
	Table Values(string Cat)
		plua Ret = {}
		plua Num 
		Num = Lua.GINIE.ValsGrab(Tag,Cat)
		for i=0,Num-1
			Ret[i]=Lua.GINIE.Vals(Tag,i)
		end
		return Ret
	End
End

Var Parse(string src,string _Tag="")
	Var Ret
	If !Loaded
		Lua.SCI_InitAPI(Lua.SCI_StateName,"GINIE")
		Loaded = true
	End
	String T
	T=Lua.GINIE.Create(_Tag)
	Ret = New TGINIE(T)
	Ret.Source=src
	return ret
End

Var Create(string _Tag="")
	If !Loaded
		Lua.SCI_InitAPI(Lua.SCI_StateName,"GINIE")
		Loaded = true
	End
	String T
	T=Lua.GINIE.Create(_Tag)
	Return New TGINIE(T)
End

Var Obtain(string _Tag)
	If !Loaded
		Lua.SCI_InitAPI(Lua.SCI_StateName,"GINIE")
		Loaded = true
	End
	Assert(Lua.GINIE.Has(_Tag),"No GINIE tagged ".._Tag..", so I cannot obtain it!")
	Return New TGINIE(_Tag)
End

Var CreateNew(string _Tag)
	if Lua.GINIE.Has(_Tag)
		Return Obtain(_Tag)
	else
		Return Create(_Tag)
	End
End

Var Load(string _File,String _Tag)
	Lua.GINIE.Load(_File,_Tag)
	Return Obtain(_Tag)
End
	
Var LoadNew(string _File,String _Tag)
	If Lua.GINIE.Has(_Tag)
		Return Obtain(_Tag)
	Else
		Return Load(_File,_Tag)
	End
End

Var LoadHome(String _File,String _Tag,String AutoSF="",String AutoSC="")
	Lua.GINIE.LoadHome(_File,_Tag,AutoSF,AutoSC)
	Return Obtain(_Tag)
End
	
Var LoadHomeNew(string _File,String _Tag,String AutoSF="",String AutoSC="")
	If Lua.GINIE.Has(_Tag)
		Return Obtain(_Tag)
	Else
		Return LoadHome(_Tag,AutoSF,AutoSC)
	End
End