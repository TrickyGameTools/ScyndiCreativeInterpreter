// License Information:
// SCI_Exe/IntLibs/SCI/Kthura.scyndi
// Kthura Link up for Scyndi's Creative Interpreter
// version: 23.12.24
// Copyright (C) 2023 Jeroen P. Broks
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information

Module

// Just making sure this comes first. GewoonNiks will contain 'nil' as result, but that doesn't matter!
Var GewoonNiks = Lua.SCI_InitAPI(Lua.SCI_StateName,"Kthura")

Const Delegate Load = Lua.Kthura.Load
Const Delegate Pick = Lua.Kthura.Pick
Const Delegate PickLayer = Lua.Kthura.PickLayer

Void GoToMap(String Tag,String File="",string Layer="")
	If File!=""
		Load(File)
	End
	Pick(Tag)
	If Layer!=""
		Pick(Layer)
	End
End

plua _Niks()
end

plua _ObjData

void SData(s,string key,value)
	Lua.Kthura.ObjDataSet(s.____objtag,Key,Lua.tostring(value))
end
string GData(s,string key)
	Return Lua.Kthura.ObjDataGet(s.____objtag,Key)
End

plua _ObjKeyIndex(s,string Key)
	Switch (Upper(Key))
	Case "STOPWALKING"
		Lua.Kthura.StopWalking(s.____objtag)
		return _Niks
	Case "DATA"
		_ObjData = _ObjData || {}
		_ObjData[s.____objtag] = _ObjData[s.____objtag] || SetMetaTable({["____objtag"]=s.____objtag},{["__index"]=GData,["__newindex"]=SData})
		return _ObjData[s.____objtag]
	Default
		return Lua.Kthura.GetObj(s.____objtag,Key)
	End
end

plua _ObjKeyNewIndex(s,string Key,value)
	if (Lua.type(value)=="boolean" || Lua.type(value)=="nil")
		if value
			Lua.Kthura.SetObj(s.____objtag,Key,1)
		else
			Lua.Kthura.SetObj(s.____objtag,Key,0)
		end
	else
		Lua.Kthura.SetObj(s.____objtag,Key,value)
	end
end

plua _ObjIndex(s,string key)
	key=upper(key)
	if !s.____table[key] 
		s.____table[key] = SetMetaTable({["____objtag"]=key},{["__index"]=_ObjKeyIndex, ["__newindex"]=_ObjKeyNewIndex})
	end
	// print("Obj.",key," => ",s.____table[key]) // debug
	return s.____table[key]
end

plua _ReadOnly(s,k)
	Lua.error("Trying to write into a read only property")
end

Const Delegate StopWalking=Lua.Kthura.StopWalking

plua _Obj

init
	_Obj = SetMetaTable({["____table"]={}},{["__index"]=_ObjIndex,["__newindex"]=_ReadOnly})
end
Get Var Obj
	return _Obj
End
	

Get String CurrentMap
	Return Lua.Kthura.CurrentMap()
End

Set String CurrentMap
	Pick(Value)
End

Get String CurrentLayer
	Return Lua.Kthura.CurrentLayer()
End

Set String CurrentLayer
	PickLayer(Value)
End

Get String LastLoadedMap
	Return Lua.Kthura.LastLoadedMap()
End


Void ObjRGB(string Tag, Byte R,Byte G, Byte B)
	Obj[Tag].R=R
	Obj[Tag].G=G
	Obj[Tag].B=B
end

Const Delegate ObjHSV = Lua.Kthura.ColorObjJSV

Const Delegate WalkTo = Lua.Kthura.WalkTo
Const Delegate MoveTo = Lua.Kthura.MoveTo

Const Delegate Draw = Lua.Kthura.Draw
Const Delegate Spawn = Lua.Kthura.Spawn
Const Delegate HasObj = Lua.Kthura.HasObj

Const Delegate InObj = Lua.Kthura.InObj
Const Delegate Walking = Lua.Kthura.Walking

Const Delegate Kill = Lua.Kthura.Kill

Const Delegate Block = Lua.Kthura.Block
Const Delegate Remap = Lua.Kthura.Remap

Const Delegate HideByLabel = Lua.Kthura.HideByLabel
Const Delegate ShowByLabel = Lua.Kthura.ShowByLabel


QuickMeta Kthura_Meta
	index
		return Lua.Kthura.GetMeta(Key)
	end
	newindex
		Lua.Kthura.SetMeta(Key,Value)
	end
end
	
Get Var Meta
	Return Kthura_Meta
End

Get Var MetaData
	Return Kthura_Meta
End