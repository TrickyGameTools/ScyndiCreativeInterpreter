// License:
// 	SCI_Exe/IntLibs/SCI/Kthura.scyndi
// 	Kthura Link up for Scyndi's Creative Interpreter
// 	version: 25.04.01 II
// 
// 	Copyright (C) 2023, 2024, 2025 Jeroen P. Broks
// 
// 	This software is provided 'as-is', without any express or implied
// 	warranty.  In no event will the authors be held liable for any damages
// 	arising from the use of this software.
// 
// 	Permission is granted to anyone to use this software for any purpose,
// 	including commercial applications, and to alter it and redistribute it
// 	freely, subject to the following restrictions:
// 
// 	1. The origin of this software must not be misrepresented; you must not
// 	   claim that you wrote the original software. If you use this software
// 	   in a product, an acknowledgment in the product documentation would be
// 	   appreciated but is not required.
// 	2. Altered source versions must be plainly marked as such, and must not be
// 	   misrepresented as being the original software.
// 	3. This notice may not be removed or altered from any source distribution.
// End License

Module

// Just making sure this comes first. GewoonNiks will contain 'nil' as result, but that doesn't matter!
Var GewoonNiks = Lua.SCI_InitAPI(Lua.SCI_StateName,"Kthura")
plua MyKthura

Init
	// A bug caused internal overwriting, eh?
	// Not gonna make that happen again!
	//print("???")
	MyKthura = Lua.Kthura
	Lua.Kthura = nil
End

void Load(String T,String F)
	MyKthura.Load(T,F)		
end
	
void Pick(String KT,String LT="")
	Ternary(LT=="", MyKthura.Pick(KT),MyKthura.Pick(KT,LT))
	MyKthura.GetLayers(0)
end

Const Delegate PickLayer = Lua.Kthura.PickLayer
Const Delegate GoToLayer = Lua.Kthura.PickLayer

Void GoToMap(String Tag,String File="",string Layer="")
	If File!=""
		Load(Tag,File)
	End
	If Layer!=""
		Pick(Tag,Layer)
	Else
		Pick(Tag)
	End
End

QuickMeta Kthura_Layers
	newindex
		Lua.error("Layers is read-only!")
	end
	index
		Switch Upper(Lua.tostring(Key))
			Case "EACH"
				int p := -1
				ddef ret
					p++
					if p>=MyKthura.GetLayers(2)
						return Nil,Nil
					End
					return MyKthura.GetLayers(1,p),p
				End
				return ret
			Case "LEN" "LENGTH" "SIZE"
				return MyKthura.GetLayers(2)
			Default
				Return MyKthura.GetLayers(1,Key)
		End
	End
End
Get Var Layers
	Return Kthura_Layers
End

plua _Niks()
end

plua _ObjData

void SData(s,string key,value)
	MyKthura.ObjDataSet(s.____objtag,Key,Lua.tostring(value))
end
string GData(s,string key)
	Return MyKthura.ObjDataGet(s.____objtag,Key)
End

plua _ObjKeyIndex(s,string Key)
	Switch (Upper(Key))
	Case "STOPWALKING"
		MyKthura.StopWalking(s.____objtag)
		return _Niks
	Case "WALKTO" "MOVETO"
		ddef func
			Kthura[Key](s.____objtag,infinity)
		end
		return func
	Case "INZONE" "INOBJ" "ISINZONE" "ISINOBJ" "PIXINOBJ"
		if s.___objinobj==0
			ddef func				
				//return Kthura.InObj(s.____objtag,infinity)
				t:=infinity				
				return Ternary(Kthura.HasObj(t),Kthura.InObj(t,s.X,s.Y),False)
			end
			s.___objinobj=func
		end
		return s.___objinobj
	Case "DATA"
		_ObjData = _ObjData || {}
		_ObjData[s.____objtag] = _ObjData[s.____objtag] || SetMetaTable({["____objtag"]=s.____objtag},{["__index"]=GData,["__newindex"]=SData})
		return _ObjData[s.____objtag]
	Default
		return MyKthura.GetObj(s.____objtag,Key)
	End
end

plua _ObjKeyNewIndex(s,string Key,value)
	if (Lua.type(value)=="boolean" || Lua.type(value)=="nil")
		if value
			MyKthura.SetObj(s.____objtag,Key,1)
		else
			MyKthura.SetObj(s.____objtag,Key,0)
		end
	else
		MyKthura.SetObj(s.____objtag,Key,value)
	end
end

plua _ObjIndex(s,string key)
	if !(Prefixed(key,"%") || Kthura.HasObj(key))
		print("\x1b[93m"..lua.debug.traceback().."\x1b[0m\n")
		Lua.error("Can't read non-existent object: "..key)
	end
	key=upper(key)
	if !s.____table[key] 
		s.____table[key] = SetMetaTable({["____objtag"]=key,["___objinobj"]=0},{["__index"]=_ObjKeyIndex, ["__newindex"]=_ObjKeyNewIndex})
	end
	// print("Obj.",key," => ",s.____table[key]) // debug
	return s.____table[key]
end

plua _ReadOnly(s,k)
	Lua.error("Trying to write into a read only property")
end

Const Delegate StopWalking=Lua.Kthura.StopWalking

plua _Obj

init
	_Obj = SetMetaTable({["____table"]={}},{["__index"]=_ObjIndex,["__newindex"]=_ReadOnly})
end
Get Var Obj
	return _Obj
End
	

Get String CurrentMap
	Return MyKthura.CurrentMap()
End

Set String CurrentMap
	Pick(Value)
End

Get String CurrentLayer
	if type(MyKthura.CurrentLayer)!="function"
		Lua.error(sprintf("Hey! What the fuck is going on here? Somehow the script placed %s with value '%s' in the Kthura.CurrentLayer linkup to C++!",type(MyKthura.CurrentLayer),MyKthura.CurrentLayer))
		Return ""
	End
	Return MyKthura.CurrentLayer()
End

Set String CurrentLayer
	PickLayer(Value)
End

Get String LastLoadedMap
	Return MyKthura.LastLoadedMap()
End

// Lazy!
Get String LastLoaded
	Return MyKthura.LastLoadedMap()
End

Bool AutoRemapAll = true
Get Bool AutoRemap
	Return MyKthura.GetAutoRemap()
End
Set Bool AutoRemap
	Ternary(AutoRemapAll,MyKthura.SetAutoRemap(value),MyKthura.SetAutoRemap(value,MyKthura.CurrentLayer()),MyKthura.SetAutoRemap(value))
End

Get Bool AnyThingMoving
	return MyKthura.AnyThingMoving(0)
End
Get Bool AnythingWalking
	return MyKthura.AnyThingMoving(1)
End

Void ObjRGB(string Tag, Byte R,Byte G, Byte B)
	Obj[Tag].R=R
	Obj[Tag].G=G
	Obj[Tag].B=B
end

Const Delegate ObjHSV = Lua.Kthura.ColorObjJSV

Const Delegate WalkTo = Lua.Kthura.WalkTo
Const Delegate MoveTo = Lua.Kthura.MoveTo

Const Delegate Draw = Lua.Kthura.Draw
Const Delegate Spawn = Lua.Kthura.Spawn
Const Delegate HasObj = Lua.Kthura.HasObj

Const Delegate InObj = Lua.Kthura.InObj
Const Delegate Walking = Lua.Kthura.Walking
Const Delegate Moving  = Lua.Kthura.Moving

Const Delegate Kill = Lua.Kthura.Kill

Const Delegate Block = Lua.Kthura.Block
Const Delegate Remap = Lua.Kthura.Remap

Const Delegate HideByLabel = Lua.Kthura.HideByLabel
Const Delegate ShowByLabel = Lua.Kthura.ShowByLabel
Const Delegate HideButLabel = Lua.Kthura.HideButLabel
Const Delegate ShowButLabel = Lua.Kthura.ShowButLabel

Void RemapDominance()
	MyKthura.Remap(1)
End

Void RemapTags()
	MyKthura.Remap(2)
End

Void RemapLabels()
	MyKthura.Remap(3)
End

Void BuildBlockMap()
	MyKthura.Remap(4)
End

QuickMeta Kthura_Meta
	index
		return MyKthura.GetMeta(Key)
	end
	newindex
		MyKthura.SetMeta(Key,Value)
	end
end
	
Get Var Meta
	Return Kthura_Meta
End

Get Var MetaData
	Return Kthura_Meta
End

Get Var Data
	Return Kthura_Meta
End

// DON'T call this directly. You can better use the "official" routines
Const Delegate __NewObject = Lua.Kthura.NewObj

Var NewObject(String Kind,string Tag="")
	plua ret
	ret = Obj["%"..__NewObject(Kind)]
	if Tag!="";ret.Tag=Tag;End
	return ret
End

Var NewTiledArea(int X, int Y, int W, int H, String Tex)
	var r;r = NewObject("TiledArea")
	r.X = X
	r.Y = Y
	r.W = W
	r.H = H
	r.Texture = Tex
	r.r = 255
	r.g = 255
	r.b = 255
	r.alpha = 255
	r.Visible = True
	return r
End

Var NewStrechedArea(int X, int Y, int W, int H, String Tex)
	var r;r = NewObject("StrechedArea")
	r.X = X
	r.Y = Y
	r.W = W
	r.H = H
	r.Texture = Tex
	r.r = 255
	r.g = 255
	r.b = 255
	r.alpha = 255
	r.Visible = True
	return r
End	

Var NewObstacle(int X, Int Y, String Tex)
	var r;r = NewObject("Obstacle")
	r.X = X
	r.Y = Y
	r.Texture = Tex
	r.r = 255
	r.g = 255
	r.b = 255
	r.alpha = 255
	r.Visible = True
	return r
End	

Var NewRect(int X, int Y, int W, int H, int RR=255,int RG=255,int RB=255,int RA=255)
	var r;r = NewObject("Rect")
	r.X = X
	r.Y = Y
	r.W = W
	r.H = H	
	r.r = RR
	r.g = RG
	r.b = RB
	r.alpha = RA
	r.Visible = True
	return r
End	


Var NewZone(int X, int Y, int W, int H)
	var r;r = NewObject("Zone")
	r.X = X
	r.Y = Y
	r.W = W
	r.H = H	
	return r
End	

Var NewExit(Int X,int Y, String Tag,String Wind="North")
var r;r = NewObject("Exit")
	r.X = X
	r.Y = Y
	r.Tag = Tag
	r.Data.Wind=Wind
	r.Dominance=20
	return r
End

Get Var TagList
	ret := {}
	l := MyKthura.TagList()
	for i=0,l-1 
		ret[i]=MyKthura.TagList(i)
	end
	return ret
End

