// License Information:
// SCI_Exe/IntLibs/SCI/State.scyndi
// Scyndi's Creative Interpreter - InterState
// version: 23.01.18
// Copyright (C) 2023 Jeroen P. Broks
// This software is provided 'as-is', without any express or implied
// warranty.  In no event will the authors be held liable for any damages
// arising from the use of this software.
// Permission is granted to anyone to use this software for any purpose,
// including commercial applications, and to alter it and redistribute it
// freely, subject to the following restrictions:
// 1. The origin of this software must not be misrepresented; you must not
// claim that you wrote the original software. If you use this software
// in a product, an acknowledgment in the product documentation would be
// appreciated but is not required.
// 2. Altered source versions must be plainly marked as such, and must not be
// misrepresented as being the original software.
// 3. This notice may not be removed or altered from any source distribution.
// End License Information
Module

Var GewoonNiks = Lua.SCI_InitAPI(Lua.SCI_StateName,"InterState")

Const Delegate RawCall = Lua.InterState.Call
Const Delegate Load = Lua.InterState.Load
Const Delegate LoadNew = Lua.InterState.LoadNew

Void Call(String State,String Func,Infinity)
	string Args
	for i,v in Lua.ipairs{ Infinity }
		// print(i,Lua.type(v),v) // debug only!
		if (i>1)
			Args = Args .. ", "
		end
		switch(Lua.type(v))
			case "number"
				Args = Args .. v
			case "boolean"
				if v
					Args = Args .. "true"
				else
					Args = Args .. "false"
				end
			case "string"
				Args = Args .. sprintf("\"%s\"",v)
			default
				error(sprintf("State.Call.%s.%s: Argument %d is of type %s which cannot be parsed",State,Func,i,Lua.type(v)))			
		end
		if Args==""
			Args="nil"
		end
	End	
	RawCall(State,Func,Args)
End