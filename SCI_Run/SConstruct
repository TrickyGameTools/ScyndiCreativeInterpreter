import platform
from datetime import date
from os import system
from os import environ

Today = date.today().strftime("%b %d %y")
Fmt = """# SRF Identification file!
# Please note that this file may not live in version control repositories, as it is generated by bsrf.ps1
# and will as result spook up the repository.

[srf]
Engine=SCI
Description=Resource for Scyndi's Creative Interpreter
Build=%s
"""

print("\x1b[32mScyndi's Creative Interpreter\x1b[33m\tBuilder script for the run-time environment\x1b[0m\n(c) Jeroen P. Broks\n")
def Doing(a,b): print("\x1b[93m%s: \x1b[96m%s\x1b[0m"%(a,b))
Doing("Platform",platform.system())
print("\n\n")

# SRF
Doing("Writing","Identification for SRF")
with open("srf/ID/Identify.ini", "w") as text_file:
    text_file.write(Fmt%Today)
Doing("Packaging","SRF")
system("jalondi create -y -m -cm zlib -fc zlib ../SCI_Exe/SCI_Run.srf srf")

# API Header
Doing("Generating","API Headers")
system("../APIHeader/apiheader_%s"%platform.system().lower())

# Base Functions
Doing("Gathering","Source files!")
Files = []
Libs = []

def Add(cat,files):
    for f in files: 
        Doing(cat,f)
        Files.append(f)

def AddLib(cat,files):
    for f in files: 
        Doing("Lib "+cat,f)
        Files.append(f)
        
# zlib        
if platform.system()=="Linux":
    Add("zlib",Glob("../../../Libs/JCR6/3rdParty/zlib/src/*.c"))
else:
    AddLib("zlib",["../../../Libs/JCR6/3rdParty/3rdParty/zlib/zlib"])
    
# project
#Environment(ENV = {'PATH' : environ['PATH']})
Environment(ENV = {'PATH' : "/usr/local/lib"})
AddLib("SDL2",["SDL2","SDL2_mixer","SDL2_image","SDL2main"])
Add("JCR6",[    
    "../../../Libs/JCR6/Source/JCR6_Core.cpp",
    "../../../Libs/JCR6/Source/JCR6_JQL.cpp",
    "../../../Libs/JCR6/Source/JCR6_RealDir.cpp",
    "../../../Libs/JCR6/Source/JCR6_Write.cpp",
    "../../../Libs/JCR6/Source/JCR6_zlib.cpp"])
Add("Kthura",[    
    "../../../Libs/Kthura/Source/Kthura_Core.cpp",
    "../../../Libs/Kthura/Source/Kthura_Draw.cpp",
    "../../../Libs/Kthura/Source/Kthura_Draw_TQSG.cpp",
    "../../../Libs/Kthura/Source/Kthura_LoadCompiled.cpp",
    "../../../Libs/Kthura/Source/Kthura_Walk_Dijkstra.cpp"])
Add("Lua",[    
    "../../../Libs/Lunatic/Lua/Raw/src/lapi.c",
    "../../../Libs/Lunatic/Lua/Raw/src/lauxlib.c",
    "../../../Libs/Lunatic/Lua/Raw/src/lbaselib.c",
    "../../../Libs/Lunatic/Lua/Raw/src/lcode.c",
    "../../../Libs/Lunatic/Lua/Raw/src/lcorolib.c",
    "../../../Libs/Lunatic/Lua/Raw/src/lctype.c",
    "../../../Libs/Lunatic/Lua/Raw/src/ldblib.c",
    "../../../Libs/Lunatic/Lua/Raw/src/ldebug.c",
    "../../../Libs/Lunatic/Lua/Raw/src/ldo.c",
    "../../../Libs/Lunatic/Lua/Raw/src/ldump.c",
    "../../../Libs/Lunatic/Lua/Raw/src/lfunc.c",
    "../../../Libs/Lunatic/Lua/Raw/src/lgc.c",
    "../../../Libs/Lunatic/Lua/Raw/src/linit.c",
    "../../../Libs/Lunatic/Lua/Raw/src/liolib.c",
    "../../../Libs/Lunatic/Lua/Raw/src/llex.c",
    "../../../Libs/Lunatic/Lua/Raw/src/lmathlib.c",
    "../../../Libs/Lunatic/Lua/Raw/src/lmem.c",
    "../../../Libs/Lunatic/Lua/Raw/src/loadlib.c",
    "../../../Libs/Lunatic/Lua/Raw/src/lobject.c",
    "../../../Libs/Lunatic/Lua/Raw/src/lopcodes.c",
    "../../../Libs/Lunatic/Lua/Raw/src/loslib.c",
    "../../../Libs/Lunatic/Lua/Raw/src/lparser.c",
    "../../../Libs/Lunatic/Lua/Raw/src/lstate.c",
    "../../../Libs/Lunatic/Lua/Raw/src/lstring.c",
    "../../../Libs/Lunatic/Lua/Raw/src/lstrlib.c",
    "../../../Libs/Lunatic/Lua/Raw/src/ltable.c",
    "../../../Libs/Lunatic/Lua/Raw/src/ltablib.c",
    "../../../Libs/Lunatic/Lua/Raw/src/ltm.c",
    "../../../Libs/Lunatic/Lua/Raw/src/lundump.c",
    "../../../Libs/Lunatic/Lua/Raw/src/lutf8lib.c",
    "../../../Libs/Lunatic/Lua/Raw/src/lvm.c",
    "../../../Libs/Lunatic/Lua/Raw/src/lzio.c"]);
Add("Lunatic",[    
    "../../../Libs/Lunatic/Lunatic.cpp"])
Add("Medals",[    
    "../../../Libs/Medals/Medals.cpp"])
Add("Statistician",[    
    "../../../Libs/Statistician/Statistician.cpp",
    "../../../Libs/Statistician/Statistician_LoadJCR6.cpp",
    "../../../Libs/Statistician/Statistician_SaveJCR6.cpp"])
Add("Tricky's Quick SDL Libraries",[    
    "../../../Libs/TQSL/Source/TQSA.cpp",
    "../../../Libs/TQSL/Source/TQSE.cpp",
    "../../../Libs/TQSL/Source/TQSG.cpp",
    "../../../Libs/TQSL/Source/TQSG_BlopPlasma.cpp"])
Add("Units",[    
    "../../../Libs/Units/Source/SlyvArgParse.cpp",
    "../../../Libs/Units/Source/SlyvAsk.cpp",
    "../../../Libs/Units/Source/SlyvBank.cpp",
    "../../../Libs/Units/Source/SlyvDijkstra.cpp",
    "../../../Libs/Units/Source/SlyvDir.cpp",
    "../../../Libs/Units/Source/SlyvDirry.cpp",
    "../../../Libs/Units/Source/SlyvMD5.cpp",
    "../../../Libs/Units/Source/SlyvOpenURL.cpp",
    "../../../Libs/Units/Source/SlyvQCol.cpp",
    "../../../Libs/Units/Source/SlyvRequestFile.cpp",
    "../../../Libs/Units/Source/SlyvRoman.cpp",
    "../../../Libs/Units/Source/SlyvSTOI.cpp",
    "../../../Libs/Units/Source/SlyvStream.cpp",
    "../../../Libs/Units/Source/SlyvString.cpp",
    "../../../Libs/Units/Source/SlyvTime.cpp",
    "../../../Libs/Units/Source/SlyvVolumes.cpp",
    "../../../Libs/Units/Source/SlyvWindows.cpp"])
Add("SCI Shared",[    
    "../SCI_Share/SCI_GlobalConfig.cpp"])
Add("SCI API",[    
    "API/API_Audio.cpp",
    "API/API_Bank.cpp",
    "API/API_BlopPlasma.cpp",
    "API/API_DebugConsole.cpp",
    "API/API_Events.cpp",
    "API/API_GINIE.cpp",
    "API/API_Graphics.cpp",
    "API/API_InterState.cpp",
    "API/API_JCR.cpp",
    "API/API_Kthura.cpp",
    "API/API_Medals.cpp",
    "API/API_Random.cpp",
    "API/API_RealFile.cpp",
    "API/API_SGFile.cpp",
    "API/API_Statistician.cpp",
    "API/API_Vars.cpp",
    "API/API_String.cpp",
    "API/API_SGJCR.cpp"])
Add("SCI Main",[    
    "SCI_Audio.cpp",
    "SCI_Config.cpp",
    "SCI_Crash.cpp",
    "SCI_Graphics.cpp",
    "SCI_JCR.cpp",
    "SCI_Kthura.cpp",
    "SCI_Load.cpp",
    "SCI_Run.cpp",
    "SCI_Script.cpp"])
    
IncludeDirs=[    
    "../../../Libs/JCR6/Headers",
    "../../../Libs/Units/Headers",
    "../../../Libs/Kthura/Headers",
    "../../../Libs/TQSL/Headers",
    "../../../Libs/Statistician",
    "../../../Libs/Lunatic",
    "../../../Libs/Medals"]
    
    
Program("bin/sci_run_%s"%platform.system().lower(), Files,LIBS=Libs,CPPPATH=IncludeDirs)